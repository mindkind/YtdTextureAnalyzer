using System;
using System.IO;
using CodeWalker.GameFiles;

namespace YtdTextureAnalyzer
{
    class Program
    {
        static void Main(string[] args)
        {
            if (args.Length < 1)
            {
                Console.WriteLine("Usage: YtdTextureAnalyzer <ytd_file>");
                return;
            }

            string filePath = args[0];
            AnalyzeYTD(filePath);
        }

        static void AnalyzeYTD(string filePath)
        {
            YtdFile ytd = new YtdFile();
            
            if (!File.Exists(filePath))
            {
                Console.WriteLine($"Error: File not found - {filePath}");
                return;
            }

            byte[] fileData = File.ReadAllBytes(filePath);
            ytd.Load(fileData);

            if (ytd.TextureDict == null || ytd.TextureDict.Textures == null)
            {
                Console.WriteLine("No textures found in this YTD file.");
                return;
            }

            int textureCount = ytd.TextureDict.Textures.Count;
            long totalSize = 0;

            Console.WriteLine($"Found {textureCount} textures in {filePath}:\n");

            for (int i = 0; i < textureCount; i++)  
            {
                var texture = ytd.TextureDict.Textures[i]; 

                if (texture == null)
                    continue;

                string name = texture.Name;
                string compression = texture.Format.ToString();
                long fileSize = texture.Data?.BlockLength ?? 0;
                totalSize += fileSize;

                Console.WriteLine($"Texture: {name}, Compression: {compression}, File Size: {fileSize} bytes");
            }

            double totalSizeMB = totalSize / (1024.0 * 1024.0);
            Console.WriteLine($"Total Texture Data Size: {totalSize} bytes ({totalSizeMB:F2} MB)");
        }
    }
}
